select * from receipt

select * from detailitem

select * from singer

select * from album


-- No 1

CREATE OR REPLACE VIEW Stock_Album AS
SELECT S.singername,albumname,releaseyear,stock
FROM Singer S
INNER JOIN Album A ON S.Singerid = A.Singerid
ORDER BY S.Singername

select * from Stock_Album

-- No 2

-- Create table albumlog
CREATE TABLE ALBUMLOG (
	CASEID INT GENERATED ALWAYS AS IDENTITY,
	ACTIVITY VARCHAR(80),
	ALBUMNO CHAR(3),
	COLUMNCHANGE VARCHAR(50),
	STARTTIME TIMESTAMP DEFAULT NOW()
);

-- Create function trigger to insert
CREATE OR REPLACE FUNCTION insert_log()
RETURNS TRIGGER
LANGUAGE PLPGSQL
AS $$
BEGIN
	INSERT INTO ALBUMLOG (ACTIVITY, ALBUMNO, COLUMNCHANGE, STARTTIME)
	VALUES ('Menambah Album', new.ALBUMNO, NULL, now());
	RETURN NEW;
END;
$$

CREATE OR REPLACE TRIGGER log_insert 
AFTER INSERT ON ALBUM
FOR EACH ROW
EXECUTE PROCEDURE insert_log();

-- Create function trigger to update
CREATE OR REPLACE FUNCTION update_log()
RETURNS TRIGGER
LANGUAGE PLPGSQL
AS $$
BEGIN
	INSERT INTO ALBUMLOG (ACTIVITY, ALBUMNO, COLUMNCHANGE, STARTTIME)
	VALUES ('Merubah Item Album', new.ALBUMNO, 'ALBUMNAME', now());
	RETURN NEW;
END;
$$

CREATE OR REPLACE TRIGGER log_update
AFTER UPDATE ON ALBUM
FOR EACH ROW
EXECUTE PROCEDURE update_log();

-- Create function trigger to delete 
CREATE OR REPLACE FUNCTION delete_log()
RETURNS TRIGGER
LANGUAGE PLPGSQL
AS $$
BEGIN
	INSERT INTO ALBUMLOG (ACTIVITY, ALBUMNO, COLUMNCHANGE, STARTTIME)
	VALUES ('Menghapus Album', old.ALBUMNO, NULL, now());
	RETURN NEW;
END;
$$

CREATE OR REPLACE TRIGGER log_delete
AFTER DELETE ON ALBUM
FOR EACH ROW
EXECUTE PROCEDURE delete_log();

-- Insert testing
INSERT INTO ALBUM VALUES ('K01', 'A06', 'WIND AND WISH', 2023, 480000.00, 10);
-- Delete testing
DELETE FROM ALBUM WHERE ALBUMNO = 'A06';
-- Update testing
UPDATE ALBUM
SET ALBUMNAME = 'BE TOGETHER'
WHERE ALBUMNO = 'A05';

SELECT * FROM ALBUM;
SELECT * FROM ALBUMLOG;

-- No 3
CREATE OR REPLACE FUNCTION update_album_stock()
RETURNS TRIGGER AS $$
BEGIN
  UPDATE ALBUM
  SET STOCK = STOCK - NEW.AMOUNT
  WHERE AlbumNo = NEW.ALBUMNO;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER stock_album_update
AFTER INSERT ON DETAILITEM
FOR EACH ROW
EXECUTE FUNCTION update_album_stock();

INSERT INTO RECEIPT (ReceiptNo, CustomerName, ReceiptDate)
VALUES ('R0004', 'YAYA SOLICHAH', '2023-06-08');

INSERT INTO DETAILITEM (DetailID, AlbumNo, ReceiptNo, Amount, TotalPrice)
VALUES ('D0006', 'A04', 'R0004', 2, 1070800);

INSERT INTO DETAILITEM (DetailID, AlbumNo, ReceiptNo, Amount, TotalPrice)
VALUES ('D0007', 'A05', 'R0004', 1, 340000);

select * from album

-- No 4
CREATE VIEW PENDAPATAN AS
SELECT EXTRACT(MONTH FROM r.RECEIPTDATE) AS MONTHALBUM, EXTRACT(YEAR FROM r.RECEIPTDATE) AS YEARALBUM, SUM(di.TOTALPRICE) AS SUM
FROM RECEIPT r
INNER JOIN DETAILITEM di ON r.RECEIPTNO = di.RECEIPTNO
GROUP BY EXTRACT(MONTH FROM r.RECEIPTDATE), EXTRACT(YEAR FROM r.RECEIPTDATE)
ORDER BY MONTHALBUM, YEARALBUM;

SELECT * FROM PENDAPATAN


-- No 5
CREATE OR REPLACE FUNCTION SEARCHALBUM(penyanyi VARCHAR)
RETURNS TABLE(albumname VARCHAR) AS $$
BEGIN
  RETURN QUERY
  SELECT ALBUM.ALBUMNAME
  FROM ALBUM
  JOIN SINGER ON ALBUM.SINGERID = SINGER.SINGERID
  WHERE SINGER.SINGERNAME ILIKE '%' || penyanyi || '%';
END;
$$ LANGUAGE plpgsql;

SELECT * FROM SEARCHALBUM('Kahitna');

SELECT * FROM SEARCHALBUM('Ariana Grande');